##CI CD build in single pipeline

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven
      - name: execute permission to Maven
        run: chmod +x mvnw
      
      - name: Test
        run: mvn --batch-mode -Dmaven.test.failure.ignore=true test
      
      - name: Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true


      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "http://your_sonarqube_server_url"
          
      - name: Build with Maven Wrapper 
        run: ./mvnw -B package
       
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.24.0' # default is latest stable
        id: install
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        # id: login-ecr
        # uses: aws-actions/amazon-ecr-login@v1
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      
      # - name: execute permission to Maven
      #   run: chmod +x mvnw
  
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: petclinic
          # IMAGE_TAG: 1.1
        run: |
          # # docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . -f Dockerfile
          # docker build --tag petclinic-app .
          ./mvnw spring-boot:build-image
          docker tag docker.io/library/spring-petclinic:3.2.0-SNAPSHOT ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/petclinic:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/petclinic:latest
          
  
      - name: Pull image
        run: docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/petclinic:latest
      
      - name: Authenticate kubectl with EKS
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name petclinic
  
      - name: Deploy to EKS
        run: |
          kubectl apply -f namespace.yml
          kubectl apply -f deployment1.yml
          kubectl apply -f service.yml

        

    
